/**
 * gradle 自身需要资源定义
 */
buildscript {
	ext {
		springBootVersion = '2.4.3'
		springBootManagementVersion = '1.0.11.RELEASE'
		//springCloudVersion = 'Hoxton.SR6'
		REPOSITORY_HOME = "http://maven.aliyun.com"
	}
	repositories {
		maven { url '${REPOSITORY_HOME}/nexus/content/groups/public/' }
		mavenCentral()
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:${springBootManagementVersion}")
	}
}


/**
 * 所有项目公共资源
 */
allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	group = 'mike.wolf'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}


/**
 * 子项目通用配置
 */
subprojects {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	// java编译的时候缺省状态下会因为中文字符而失败
	[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

	//仓库
	repositories {
		maven { url '${REPOSITORY_HOME}/nexus/content/groups/public/' }
		mavenCentral()
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter'
		compileOnly 'org.projectlombok:lombok'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}

	dependencyManagement {
		imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
		//imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" }
	}
/**
 * 发布插件
 */
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				versionMapping {
					usage('java-api') {
						fromResolutionOf('runtimeClasspath')
					}
					usage('java-runtime') {
						fromResolutionResult()
					}
				}
//                pom {
//                    name = 'My Library'
//                    description = 'A concise description of my library'
//                    url = 'http://www.example.com/library'
//                    properties = [
//                            myProp: "value",
//                            "prop.with.dots": "anotherValue"
//                    ]
//                    licenses {
//                        license {
//                            name = 'The Apache License, Version 2.0'
//                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        }
//                    }
//                    developers {
//                        developer {
//                            id = 'herion'
//                            name = 'herionZhang'
//                            email = 'john.doe@example.com'
//                        }
//                    }
//                    scm {
//                        connection = 'scm:git:git://example.com/my-library.git'
//                        developerConnection = 'scm:git:ssh://example.com/my-library.git'
//                        url = 'http://example.com/my-library/'
//                    }
//                }
			}
		}
//		repositories {
//			maven {
//				// change URLs to point to your repos, e.g. http://my.org/repo
//				def releasesRepoUrl = "http://ops.jfpal.com/nexus/repository/maven-releases"
//				def snapshotsRepoUrl = "http://ops.jfpal.com/nexus/repository/maven-snapshots"
//				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//				credentials {
//					username nexusUser
//					password nexusPassword
//				}
//			}
//		}
	}
//	configurations {
//		[apiElements, runtimeElements].each {
//			it.outgoing.artifacts.removeIf {
//				it.buildDependencies.getDependencies(null).contains(jar)
//			}
//			it.outgoing.artifact(bootJar)
//		}
//	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	test {
		useJUnitPlatform()
	}
}